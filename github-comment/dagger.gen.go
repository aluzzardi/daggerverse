// Code generated by dagger. DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log/slog"
	"os"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/sdk/resource"
	semconv "go.opentelemetry.io/otel/semconv/v1.24.0"
	"go.opentelemetry.io/otel/trace"

	"main/internal/dagger"
	"main/internal/querybuilder"
	"main/internal/telemetry"
)

var dag = dagger.Connect()

func Tracer() trace.Tracer {
	return otel.Tracer("dagger.io/sdk.go")
}

// used for local MarshalJSON implementations
var marshalCtx = context.Background()

// called by main()
func setMarshalContext(ctx context.Context) {
	marshalCtx = ctx
	dagger.SetMarshalContext(ctx)
}

type DaggerObject = querybuilder.GraphQLMarshaller

type ExecError = dagger.ExecError

// ptr returns a pointer to the given value.
func ptr[T any](v T) *T {
	return &v
}

// convertSlice converts a slice of one type to a slice of another type using a
// converter function
func convertSlice[I any, O any](in []I, f func(I) O) []O {
	out := make([]O, len(in))
	for i, v := range in {
		out[i] = f(v)
	}
	return out
}

func (r GithubComment) MarshalJSON() ([]byte, error) {
	var concrete struct {
		GithubToken *any
		MessageID   string
		Owner       string
		Repo        string
		Issue       int
		Commit      string
	}
	concrete.GithubToken = r.GithubToken
	concrete.MessageID = r.MessageID
	concrete.Owner = r.Owner
	concrete.Repo = r.Repo
	concrete.Issue = r.Issue
	concrete.Commit = r.Commit
	return json.Marshal(&concrete)
}

func (r *GithubComment) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		GithubToken *any
		MessageID   string
		Owner       string
		Repo        string
		Issue       int
		Commit      string
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.GithubToken = concrete.GithubToken
	r.MessageID = concrete.MessageID
	r.Owner = concrete.Owner
	r.Repo = concrete.Repo
	r.Issue = concrete.Issue
	r.Commit = concrete.Commit
	return nil
}

func main() {
	ctx := context.Background()

	// Direct slog to the new stderr. This is only for dev time debugging, and
	// runtime errors/warnings.
	slog.SetDefault(slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
		Level: slog.LevelWarn,
	})))

	if err := dispatch(ctx); err != nil {
		fmt.Println(err.Error())
		os.Exit(2)
	}
}

func dispatch(ctx context.Context) error {
	ctx = telemetry.InitEmbedded(ctx, resource.NewWithAttributes(
		semconv.SchemaURL,
		semconv.ServiceNameKey.String("dagger-go-sdk"),
		// TODO version?
	))
	defer telemetry.Close()

	// A lot of the "work" actually happens when we're marshalling the return
	// value, which entails getting object IDs, which happens in MarshalJSON,
	// which has no ctx argument, so we use this lovely global variable.
	setMarshalContext(ctx)

	fnCall := dag.CurrentFunctionCall()
	parentName, err := fnCall.ParentName(ctx)
	if err != nil {
		return fmt.Errorf("get parent name: %w", err)
	}
	fnName, err := fnCall.Name(ctx)
	if err != nil {
		return fmt.Errorf("get fn name: %w", err)
	}
	parentJson, err := fnCall.Parent(ctx)
	if err != nil {
		return fmt.Errorf("get fn parent: %w", err)
	}
	fnArgs, err := fnCall.InputArgs(ctx)
	if err != nil {
		return fmt.Errorf("get fn args: %w", err)
	}

	inputArgs := map[string][]byte{}
	for _, fnArg := range fnArgs {
		argName, err := fnArg.Name(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg name: %w", err)
		}
		argValue, err := fnArg.Value(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg value: %w", err)
		}
		inputArgs[argName] = []byte(argValue)
	}

	result, err := invoke(ctx, []byte(parentJson), parentName, fnName, inputArgs)
	if err != nil {
		return fmt.Errorf("invoke: %w", err)
	}
	resultBytes, err := json.Marshal(result)
	if err != nil {
		return fmt.Errorf("marshal: %w", err)
	}
	if err = fnCall.ReturnValue(ctx, dagger.JSON(resultBytes)); err != nil {
		return fmt.Errorf("store return value: %w", err)
	}
	return nil
}
func invoke(ctx context.Context, parentJSON []byte, parentName string, fnName string, inputArgs map[string][]byte) (_ any, err error) {
	_ = inputArgs
	switch parentName {
	case "GithubComment":
		switch fnName {
		case "Create":
			var parent GithubComment
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var body string
			if inputArgs["body"] != nil {
				err = json.Unmarshal([]byte(inputArgs["body"]), &body)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg body", err))
				}
			}
			return (*GithubComment).Create(&parent, ctx, body)
		case "Delete":
			var parent GithubComment
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			return nil, (*GithubComment).Delete(&parent, ctx)
		case "React":
			var parent GithubComment
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var kind string
			if inputArgs["kind"] != nil {
				err = json.Unmarshal([]byte(inputArgs["kind"]), &kind)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg kind", err))
				}
			}
			return nil, (*GithubComment).React(&parent, ctx, kind)
		case "":
			var parent GithubComment
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var githubToken *any
			if inputArgs["githubToken"] != nil {
				err = json.Unmarshal([]byte(inputArgs["githubToken"]), &githubToken)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg githubToken", err))
				}
			}
			var messageId string
			if inputArgs["messageID"] != nil {
				err = json.Unmarshal([]byte(inputArgs["messageID"]), &messageId)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg messageID", err))
				}
			}
			var owner string
			if inputArgs["owner"] != nil {
				err = json.Unmarshal([]byte(inputArgs["owner"]), &owner)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg owner", err))
				}
			}
			var repo string
			if inputArgs["repo"] != nil {
				err = json.Unmarshal([]byte(inputArgs["repo"]), &repo)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg repo", err))
				}
			}
			var issue int
			if inputArgs["issue"] != nil {
				err = json.Unmarshal([]byte(inputArgs["issue"]), &issue)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg issue", err))
				}
			}
			var commit string
			if inputArgs["commit"] != nil {
				err = json.Unmarshal([]byte(inputArgs["commit"]), &commit)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg commit", err))
				}
			}
			return New(ctx, githubToken, messageId, owner, repo, issue, commit), nil
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "":
		return dag.Module().
			WithObject(
				dag.TypeDef().WithObject("GithubComment").
					WithFunction(
						dag.Function("Create",
							dag.TypeDef().WithKind(dagger.StringKind).WithOptional(true)).
							WithDescription("example usage: \"dagger call --github-token env:GITHUB_TOKEN --owner aluzzardi --repo daggerverse --issue 1 comment --body \"hello world\"").
							WithArg("body", dag.TypeDef().WithKind(dagger.StringKind))).
					WithFunction(
						dag.Function("Delete",
							dag.TypeDef().WithKind(dagger.VoidKind).WithOptional(true)).
							WithDescription("example usage: \"dagger call --github-token env:GITHUB_TOKEN --owner aluzzardi --repo daggerverse --issue 1 delete")).
					WithFunction(
						dag.Function("React",
							dag.TypeDef().WithKind(dagger.VoidKind).WithOptional(true)).
							WithDescription("example usage: \"dagger call --github-token env:GITHUB_TOKEN --owner aluzzardi --repo daggerverse --issue 1 reaction +1\nThe kind should be one of the following values: \"+1\", \"-1\", \"laugh\", \"confused\", \"heart\", \"hooray\", \"rocket\", or \"eyes\".").
							WithArg("kind", dag.TypeDef().WithKind(dagger.StringKind), dagger.FunctionWithArgOpts{Description: "\"+1\", \"-1\", \"laugh\", \"confused\", \"heart\", \"hooray\", \"rocket\", or \"eyes\"."})).
					WithField("GithubToken", dag.TypeDef().WithKind(dagger.VoidKind).WithOptional(true)).
					WithField("MessageID", dag.TypeDef().WithKind(dagger.StringKind)).
					WithField("Owner", dag.TypeDef().WithKind(dagger.StringKind)).
					WithField("Repo", dag.TypeDef().WithKind(dagger.StringKind)).
					WithField("Issue", dag.TypeDef().WithKind(dagger.IntegerKind)).
					WithField("Commit", dag.TypeDef().WithKind(dagger.StringKind)).
					WithConstructor(
						dag.Function("New",
							dag.TypeDef().WithObject("GithubComment")).
							WithArg("githubToken", dag.TypeDef().WithKind(dagger.VoidKind).WithOptional(true)).
							WithArg("messageID", dag.TypeDef().WithKind(dagger.StringKind).WithOptional(true), dagger.FunctionWithArgOpts{DefaultValue: dagger.JSON("\"github.com/aluzzardi/daggerverse/github-comment\"")}).
							WithArg("owner", dag.TypeDef().WithKind(dagger.StringKind)).
							WithArg("repo", dag.TypeDef().WithKind(dagger.StringKind)).
							WithArg("issue", dag.TypeDef().WithKind(dagger.IntegerKind).WithOptional(true)).
							WithArg("commit", dag.TypeDef().WithKind(dagger.StringKind).WithOptional(true)))), nil
	default:
		return nil, fmt.Errorf("unknown object %s", parentName)
	}
}
